openapi: 3.0.1
info:
  title: Server-side API
  version: v1
paths:
  '/api/definition/{word}':
    get:
      tags:
        - Definitions
      summary: Defines the word
      operationId: Define
      parameters:
        - name: word
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: partOfSpeech
          in: query
          style: form
          schema:
            type: string
        - name: count
          in: query
          style: form
          schema:
            type: integer
            format: int32
      requestBody:
        content: { }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Phrase'
                    - $ref: '#/components/schemas/Noun'
                    - $ref: '#/components/schemas/Verb'
                    - $ref: '#/components/schemas/Adjective'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/HttpValidationProblemDetails'
  '/api/translation/{phrase}':
    get:
      tags:
        - Translations
      summary: Translates the phrase
      operationId: Translate
      parameters:
        - name: phrase
          in: path
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content: { }
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  '/api/pronunciation/{phrase}':
    get:
      tags:
        - Pronunciations
      summary: Pronounces the phrase
      operationId: Pronounce
      parameters:
        - name: phrase
          in: path
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content: { }
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/anki/export:
    post:
      tags:
        - Anki
      summary: Export cards
      operationId: Export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportRequest'
        required: true
      responses:
        '200':
          description: OK
  /api/anki/decks:
    get:
      tags:
        - Anki
      summary: Get available decks
      operationId: GetDecks
      requestBody:
        content: { }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
components:
  schemas:
    Adjective:
      type: object
      allOf:
        - $ref: '#/components/schemas/Definition'
      additionalProperties: false
    Card:
      type: object
      properties:
        front:
          type: string
        back:
          type: string
        media:
          type: object
          additionalProperties:
            type: string
      additionalProperties: false
    Definition:
      required:
        - $type
      type: object
      properties:
        $type:
          type: string
        lemma:
          type: string
          readOnly: true
      additionalProperties: false
      discriminator:
        propertyName: $type
        mapping:
          Phrase: '#/components/schemas/Phrase'
          Noun: '#/components/schemas/Noun'
          Verb: '#/components/schemas/Verb'
          Adjective: '#/components/schemas/Adjective'
    ExportRequest:
      type: object
      properties:
        deck:
          type: string
        cards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
      additionalProperties: false
    HttpValidationProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          readOnly: true
      additionalProperties: { }
    Inflection:
      type: object
      properties:
        type:
          type: string
        word:
          type: string
      additionalProperties: false
    Noun:
      type: object
      allOf:
        - $ref: '#/components/schemas/Definition'
      properties:
        article:
          type: string
      additionalProperties: false
    Phrase:
      type: object
      allOf:
        - $ref: '#/components/schemas/Definition'
      additionalProperties: false
    Verb:
      type: object
      allOf:
        - $ref: '#/components/schemas/Definition'
      properties:
        inflections:
          type: array
          items:
            $ref: '#/components/schemas/Inflection'
      additionalProperties: false